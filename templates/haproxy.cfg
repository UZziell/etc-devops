# HAProxy has 4 main config part.
#   global: define process-wide security and performance tunings that affect HAProxy at a low level.
#   defaults: applies settings to the following frontend and backend sections to keep thins DRY
#   frontend:
#   backend:

global
  maxconn 10240  # total maximum connections that haproxy will accept
  user haproxy
  group haproxy
  log stdout format raw local0 info
  nbproc   2 # number of processes
  cpu-map  1 0 # mapping process 1 to CPU 0
  cpu-map  2 1 # mapping process 2 to CPU 1

  # Use only cipher suites that support FS and AEAD
  ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
  ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
  ssl-default-bind-options no-sslv3 no-tlsv10 no-tlsv11

# TCP defaults
defaults
  log global
  mode tcp
  option tcplog
  option logasap
  option dontlognull
  timeout connect 20s # the time that HAProxy will wait for a TCP connection to a backend server to be established
  timeout client 300s # measures inactivity during periods that we would expect the client to be speaking, or in other words sending TCP segments
  timeout server 300s # measures inactivity when weâ€™d expect the backend server to be speaking

# TCP frontends,backends
frontend front-443
  bind :443 tfo
  tcp-request inspect-delay 10s
  tcp-request content accept if { req_ssl_hello_type 1 }
  use_backend stats if { req_ssl_sni -i -m beg stat } # ACL: if the servername begins with stat, use stats backend
  default_backend backend-tcp # default to backend-rr

backend backend-rr
  balance roundrobin # load balance with roundrobin algorithm
  server s1 5.5.5.5:443 maxconn 4096 # overwriting maxconn for this specific backend
  server s2 5.5.5.5:443 check # enabling health-check
  server s3 5.5.5.5:443 send-proxy # enabling using Proxy Protocol when talking to this backend server (the backend should also be configured to accept proxy protocol)
  server s2 5.5.5.5:443 backup # passive backup backend

backend backend-leastconn
  balance leastconn # load balance with based on least connection of the backend
  default-server maxconn 4096 check # setting defaults for all servers of this backend
  server s1 5.5.5.5:443
  server s2 5.5.5.5:443

# HTTP defaults
defaults
  log global
  mode http
  option httplog
  option logasap
  option dontlognull
  timeout connect 20s
  timeout client 300s
  timeout server 300s

# HTTP frontend,backends
frontend stats
  mode http
  bind :51415 # ssl crt /usr/local/etc/haproxy/certificate.pem # ssl-min-ver TLSv1.1
  #http-request redirect scheme https if !{ ssl_fc }
  stats enable # enable stats page
  stats hide-version
  stats uri /stats/
  stats auth uzer:3b5a9db08bc5036479902a12bca8e31a626ca84f # stat basic authentication username:password
  stats admin if TRUE # enable administrative options in stats page
  option dontlog-normal

frontend http-80
  bind :80
  use_backend stats if { path_beg /stats/ }
  default_backend backend-http

backend backend-http
  balance roundrobin
  server s1 5.5.5.5:80

backend stats
  server Local 127.0.0.1:51415

listen single-static-file
  bind  :8080
  mode  http
  monitor-uri /static/
  errorfile 200 /usr/local/etc/haproxy/static.html
